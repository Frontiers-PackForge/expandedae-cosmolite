package lu.kolja.expandedae.packets;

import java.util.HashMap;
import java.util.Map;

import appeng.api.stacks.AEKey;
import appeng.api.stacks.GenericStack;
import appeng.core.sync.BasePacket;

import net.minecraft.server.level.ServerPlayer;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

public class PacketOptimizePatterns extends BasePacket {
    HashMap<Integer, Integer> hashCodeToMultiplier = new HashMap<>();

    public PacketOptimizePatterns(final ByteBuf data) {
        int size = data.readInt();
        for (int i = 0; i < size; i++) {
            hashCodeToMultiplier.put(data.readInt(), data.readInt());
        }
    }

    public PacketOptimizePatterns(HashMap<AEKey, Integer> multipliersMap) {
        final ByteBuf data = Unpooled.buffer();

        data.writeInt(this.getPacketID());
        data.writeInt(multipliersMap.size());
        for (Map.Entry<AEKey, Integer> entry : multipliersMap.entrySet()) {
            long encoded = entry.getKey().getS
        }
    }

    @Override
    public void serverPacketData(ServerPlayer player) {
        if (player.cont)
        super.serverPacketData(player);
    }
}
